#!/bin/bash
#
# adpn-do-notify: As part of the ingest process, accept some pipelined JSON data
# from stdin, and then drop it into an Issue on the Gitlab repository.
#
# Usage: <INPUT> | adpn-do-notify --subject="<SUBJECT_LINE>"
#
# @version 2021.0707

SCRIPTPATH=$(which "$0")
SCRIPTDIR=$(dirname "${SCRIPTPATH}")
SCRIPTNAME=$(basename "${SCRIPTPATH}")

EXITCODE=0

source "${SCRIPTDIR}/adpn-define-aliases"

##########################################################################################
### COMMAND LINE: loop through switches and sort them to subsidiary scripts ##############
##########################################################################################

shopt -s lastpipe

declare -a SWITCHFILES ; SWITCHFILES=()
declare -a _ARGV ; _ARGV=()
declare -A _PARAM ; _PARAM=()

CMDLINETXT=$(mktemp)

until [[ -z "$1" ]] ; do
	printf "%s\n" "$1" >> "${CMDLINETXT}"
	shift
done

SWITCHFILES+=(${CMDLINETXT})

cat "${SWITCHFILES[@]}" | while IFS="" read -r SWITCH ; do

	if [[ "${SWITCH}" =~ ^--([A-Za-z_0-9][^=]*)(=\s*(.*)\s*)?$ ]] ; then
		KEY="${BASH_REMATCH[1]}"
		VALUE="${BASH_REMATCH[3]}"
		if [[ -z "${BASH_REMATCH[2]}" ]] ; then
			VALUE="${KEY}"
		fi

		_PARAM[$KEY]="${VALUE}"
		
	elif [[ ! -z "${SWITCH}" ]] ; then
		_ARGV+=("${SWITCH}")
	fi
	
done

rm "${CMDLINETXT}"

SCRIPT_CMD_NAME="${_PARAM[context]}"
if [[ -z "${SCRIPT_CMD_NAME}" ]] ; then
	SCRIPT_CMD_NAME="${SCRIPTNAME}"
fi

##########################################################################################
### SCRIPT: Get admin e-mail address, subject, and body from config, cmd line or stdin ###
##########################################################################################

VV="${_LINESWITCH[verbose]}"
QQ="${_LINESWITCH[quiet]}"
V="${_LINESWITCH[verbose]}"
Q=""

DBG="${_LINESWITCH[debug]}"
DBGLEVEL="${_PARAM[debug]}"
if [[ "${DBGLEVEL}" == "debug" ]] ; then
	DBGLEVEL=1
fi
if [[ "${DBGLEVEL}" -gt 1 ]] ; then
	DBGLEVEL=$(( DBGLEVEL - 1 ))
	DDBG="--debug=${DBGLEVEL}"
else
	DDBG=""
fi

if [[ -z "${_PARAM[verbose]}" ]] ; then
	Q="--quiet"
fi
if [[ -n "${QQ}" ]] ; then
	Q="--quiet"
fi

[ ! -z "${_PARAM[to]}" ] && ADMIN_EMAIL="${_PARAM[to]}" || ADMIN_EMAIL=$(adpnprop preserve/admin-email)
[ ! -z "${_PARAM[subject]}" ] && SUBJECT_TEXT="${_PARAM[subject]}" || SUBJECT_TEXT="ADPNet Ingest"

PIPED_TEXT="$( cat "${_ARGV[@]}" )"
PRETTY_JSON="$( printf "%s" "${PIPED_TEXT}" | adpn-json.py --output=application/json --indent=2 )"
DEFAULT_REPOSITORY="$( adpnprop gitlab/repository )"
USER_NAME="$( printf "%s" "${PIPED_TEXT}" | adpn-json.py --key="Staged By" )"
DIRECTORY="${_PARAM[subdirectory]}"

IFS='' read -r -d '' BODY_TEXT <<EOText
${USER_NAME} used the \`adpn\` CLI tool to upload files for an ADPNet ingest to the ${LOCATION} staging area, directory: \`${DIRECTORY}\`.

AU meta-data output by \`adpn preserve\` follows:

~~~
${PIPED_TEXT}
~~~

Pretty-printed JSON packet:

~~~
${PRETTY_JSON}
~~~

This ticket has been created automatically by the \`adpn preserve\` command to notify ADPNet Techs that the AU has been staged and is ready to be tested for ingest, and to provide a place to track the work of adding the new AU to the config server.
EOText

#ADMIN_EMAIL=$( rawurlencode "${ADMIN_EMAIL}" )
#SUBJECT_TEXT=$( rawurlencode "${SUBJECT_TEXT}" )
#BODY_TEXT=$( rawurlencode "${BODY_TEXT}" )

ADPN_GITLAB_POST_JSON=$(mktemp)

printf "%s" "${BODY_TEXT}" | adpn-do-gitlab issue --post --title="${SUBJECT_TEXT}" --pipe=description --project="${DEFAULT_REPOSITORY}" --output="application/json" ${V} ${DDBG} > "${ADPN_GITLAB_POST_JSON}" ; ADGIP_EXITCODE="$?"

if [[ "${ADGIP_EXITCODE}" -eq 0 ]] ; then
	ISSUE_ID="$( cat "${ADPN_GITLAB_POST_JSON}" | adpn-json.py --key="iid" )"
	ISSUE_URL="$( cat "${ADPN_GITLAB_POST_JSON}" | adpn-json.py --key="web_url" )"
	printf "[%s] OK: Issue # %d, URL: <%s>\n" "${SCRIPT_CMD_NAME}" "${ISSUE_ID}" "${ISSUE_URL}"
else
	printf "[%s] ERROR: Failed to post new issue to Gitlab [%s]\n" "${SCRIPT_CMD_NAME}" "${DEFAULT_REPOSITORY}" 1>&2
	cat "${ADPN_GITLAB_POST_JSON}" 1>&2
fi

rm "${ADPN_GITLAB_POST_JSON}"

EXITCODE="${ADGIP_EXITCODE}"

exit "${EXITCODE}"
