#!/bin/bash
#
# adpn-do-notify: As part of the ingest process, accept some pipelined JSON data
# from stdin, and then drop it into an Issue on the Gitlab repository.
#
# Usage: <INPUT> | adpn-do-notify --subject="<SUBJECT_LINE>"
#
# @version 2021.0707

SCRIPTPATH="$(which "$0")"
SCRIPTPATH="$(readlink -f "${SCRIPTPATH}")"
SCRIPTDIR="$(dirname "${SCRIPTPATH}")"
SCRIPTNAME="$(basename "${SCRIPTPATH}")"

source "${SCRIPTDIR}/adpn-define-aliases"

##########################################################################################
### COMMAND LINE: loop through switches and sort them to subsidiary scripts ##############
##########################################################################################

declare -a _CMDLINE ; _CMDLINE=("$0")

shopt -s lastpipe

declare -a SWITCHFILES ; SWITCHFILES=()
if [[ -r "${CONFFILE}" ]] ; then
	SWITCHFILES+=(${CONFFILE})
fi

CMDLINETXT=$(mktemp)

until [[ "$#" -lt 1 ]] ; do
	_CMDLINE+=("$1")
	printf "%s\n" "$1" >> "${CMDLINETXT}"
	shift
done

SWITCHFILES+=(${CMDLINETXT})

adpn_command_line "${SWITCHFILES[@]}"

rm "${CMDLINETXT}"

SCRIPT_CMD_NAME="${_PARAM[context]}"
if [[ -z "${SCRIPT_CMD_NAME}" ]] ; then
	SCRIPT_CMD_NAME="${SCRIPTNAME}"
fi

##########################################################################################
### PARAMETERS: GET PARAMETER VALUES FROM COMMAND LINE AND JSON INPUT ####################
##########################################################################################

EXITCODE=0
CMD=""

adpn_set_display_settings # V, VV, Q, QQ, DBG, DBGLEVEL, DDBG, SCRIPT_CMD_NAME / @see adpn-define-aliases

PIPED_TEXT="$( cat "${_ARGV[@]:1}" )"
JSON="$( printf "%s" "${PIPED_TEXT}" | adpn-json.py --output=application/json )"
PRETTY_JSON="$( printf "%s" "${JSON}" | adpn-json.py --output=application/json --indent=2 )"
STAGED_TO="$( adpn_parameter_from "--from" ".Staged To<${JSON}" )"
DEFAULT_REPOSITORY="$( adpn_parameter_from ".gitlab/repository" )"
USER_NAME="$( adpn_parameter_from ".Staged By<${JSON}" )"
EXTENT="$( adpn_parameter_from ".File Size<${JSON}" )"
LOCATION="$( adpn_parameter_from ".Staged To<${JSON}" )"
SUBDIRECTORY="$( adpn_parameter_from "--subdirectory" "--directory" )"
AU_START_URL="$( adpn_parameter_from ".Start URL<${JSON}" )"
AU_TITLE="$( adpn_parameter_from ".Ingest Title<${JSON}" )"
LABELS="$( adpn_parameter_from "--labels" "Content Ingest" )"

declare -A TEMPLATE_PARAMS=(
	[cmd]="${SCRIPT_CMD_NAME}"
	[staged_to]="${STAGED_TO}"
	[timestamp]="$( date )"
	[user_name]="${USER_NAME}"
	[extent]="${EXTENT}"
	[location]="${LOCATION}"
	[subdirectory]="${SUBDIRECTORY}"
	[au_start_url]="${AU_START_URL}"
	[au_title]="${AU_TITLE}"
	[piped_text]="${PIPED_TEXT}"
	[json]="${JSON}"
	[pretty_json]="${PRETTY_JSON}"
)

###############################################################################
## FORMAT TEMPLATE TEXT #######################################################
###############################################################################

TEMPLATE_FILE="${SCRIPTDIR}/templates/adpn.notify.md.sprintf"
if [[ -r "${TEMPLATE_FILE}" ]] ; then

	TEMPLATE_TEXT="$( cat "${TEMPLATE_FILE}" )"
	
else 

	IFS='' read -r -d '' TEMPLATE_TEXT <<EOText
Add AU from %(staged_to)s: %(subdirectory)s - %(au_title)s
==========================================================
%(user_name)s used the \`adpn\` CLI tool to upload files for an ADPNet ingest to the `%(location)s` staging area, directory: \`%(subdirectory)s\`.

AU meta-data output by \`%(cmd)s\` follows:

~~~
${PIPED_TEXT}
~~~
EOText

fi

for KEY in "${!TEMPLATE_PARAMS[@]}" ; do

	SEARCH="%(${KEY})s"
	REPLACE="${TEMPLATE_PARAMS[$KEY]}"
	
	TEMPLATE_TEXT="${TEMPLATE_TEXT//${SEARCH}/${REPLACE}}"

done

declare -a BODY_TEXT_SECTIONS=( )

SECT="$( printf "%s" "${TEMPLATE_TEXT}" | sed -E -n '0,/^\s*=+\s*$/p' )"
if [[ -n "${SECT}" ]] ; then
	BODY_TEXT_SECTIONS+=( "${SECT}" )
fi

SECT="$( printf "%s" "${TEMPLATE_TEXT}" | sed -E -n '/^\s*=+\s*$/,$p' )"
if [[ -n "${SECT}" ]] ; then
	BODY_TEXT_SECTIONS+=( "${SECT}" )
fi

if [[ "${#BODY_TEXT_SECTIONS[@]}" -gt 1 ]] ; then
	SUBJECT_TEXT="$( printf "%s" "${BODY_TEXT_SECTIONS[0]}" | head -n 1 )"
	BODY_TEXT="$( printf "%s" "${BODY_TEXT_SECTIONS[1]}" | tail -n +2 )"
else
	SUBJECT_TEXT="$( adpn_parameter_from "--subject" "ADPNet Ingest" )"
	BODY_TEXT="${BODY_TEXT_SECTIONS[0]}"
fi

###############################################################################
## EXECUTE ADPN-DO-GITLAB SCRIPT ##############################################
###############################################################################

ADPN_GITLAB_POST_JSON=$(mktemp)

printf "%s" "${BODY_TEXT}" | adpn-do-gitlab issue --post --title="${SUBJECT_TEXT}" --labels="${LABELS}" --pipe=description --project="${DEFAULT_REPOSITORY}" --output="application/json" ${V} ${DDBG} > "${ADPN_GITLAB_POST_JSON}" ; ADGIP_EXITCODE="$?"

if [[ "${ADGIP_EXITCODE}" -eq 0 ]] ; then
	if [[ "${DBG}" ]] ; then
		printf "[%s:%d] adpn-do-gitlab result: %s\n" "${SCRIPT_CMD_NAME}" "${LINENO}" "$( cat "${ADPN_GITLAB_POST_JSON}" )" 1>&2
	fi

	ISSUE_ID="$( cat "${ADPN_GITLAB_POST_JSON}" | adpn-json.py --key="iid" )"
	ISSUE_URL="$( cat "${ADPN_GITLAB_POST_JSON}" | adpn-json.py --key="web_url" )"
	printf "[%s:%d] OK: Issue # %d, URL: <%s>\n" "${SCRIPT_CMD_NAME}" "${LINENO}" "${ISSUE_ID}" "${ISSUE_URL}"
else
	printf "[%s:%d] ERROR: Failed to post new issue to Gitlab [%s]\n" "${SCRIPT_CMD_NAME}" "${LINENO}" "${DEFAULT_REPOSITORY}" 1>&2
	cat "${ADPN_GITLAB_POST_JSON}" 1>&2
fi

rm "${ADPN_GITLAB_POST_JSON}"

EXITCODE="${ADGIP_EXITCODE}"

exit "${EXITCODE}"
