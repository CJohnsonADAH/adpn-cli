#!/bin/bash
#
# adpn: master script for scripted ADPNet operations.
#
# @version 2021.0210

SCRIPTPATH="$( which "$0" )"
SCRIPTPATH="$( readlink --canonicalize "${SCRIPTPATH}" )"
SCRIPTDIR="$( dirname "${SCRIPTPATH}" )"
SCRIPT="$( basename "${SCRIPTPATH}" )"

source "${SCRIPTDIR}/adpn-define-aliases"

__USAGE__="Usage: ${SCRIPT} [--version] [--help] <CMD> [<ARGS>]"
__HELP__="[${SCRIPT}] Try '${SCRIPT} help' for more information."
__DOC__="""${__USAGE__}

  --version 	Display the version of the script
  --help    	Display these usage notes

The most commonly used ${SCRIPT} commands are:
  preserve  	ADPNet Member: prepare an AU for preservation and notify config manager
  ingest    	Config Manager: accept an AU from Member, test, and insert into titlesdb
  publish   	Config Manager: publish an accepted Member's AU to the entire network
  help      	Display usage notes for the ${SCRIPT} script or for a given command
  
Exit codes:
0 = success (successful retrieval and expected result)
1-254 = error in executing command
255 = command not supported
"""

##########################################################################################
### COMMAND LINE: loop through switches ##################################################
##########################################################################################

declare -a _ARGV ; _ARGV=("$0")
declare -a _CMDLINE ; _CMDLINE=("$0")
declare -A _PARAM=([props-server]="" [xmldir]=~ [wget]="" )

shopt -s lastpipe

declare -a SWITCHFILES ; SWITCHFILES=()
if [[ -r "${CONFFILE}" ]] ; then
	SWITCHFILES+=(${CONFFILE})
fi

CMDLINETXT=$(mktemp)

until [[ "$#" -lt 1 ]] ; do
	_CMDLINE+=("$1")
	printf "%s\n" "$1" >> "${CMDLINETXT}"
	shift
done

SWITCHFILES+=(${CMDLINETXT})

adpn_command_line "${SWITCHFILES[@]}"

rm "${CMDLINETXT}"

##########################################################################################
### SCRIPT: DETERMINE COMMAND, THEN EXECUTE PIPELINE  ####################################
##########################################################################################

EXITCODE=0
CMD="${_ARGV[1]}"


if [[ ! -z "${_PARAM[version]}" ]] ; then
	if [[ -z "${CMD}" ]] ; then
		CMD="version"
	else
		adpn version
	fi
fi

if [[ ! -z "${_PARAM[help]}" ]] ; then
	CMD="help"
	_ARGV=( "help" "${_ARGV[@]}" )
fi

case "${CMD}" in
	"")
		echo "[${SCRIPT}] command expected (for example: '${SCRIPT} preserve', '${SCRIPT} ingest', etc.)" 1>&2
		echo "${__HELP__}" 1>&2
		EXITCODE=255
		;;
	
	"version")
# @method adpn version
# Displays current version of the adpn script.
#
# Usage: adpn version
#
# @version 2019.0808
		VERSION=$(grep "^# @version" $0 | head --lines=1 | cut --only-delimited --fields=3- --delimiter=" ")
		echo "${SCRIPT} version ${VERSION}"
		EXITCODE=0
		;;
		
	"help")
# @method adpn help
# Displays usage notes for the adpn script or a given adpn script command
#
# Usage: adpn help [<CMD>]
#
# CMD is an adpn script pipeline command, e.g. "preserve", "ingest", "publish"
# If omitted, display usage notes for the adpn script as a whole.
#
# @version 2019.0715
		HELPCMD="${_ARGV[2]}"
		if [[ -z "${HELPCMD}" ]] ; then
			echo "${__DOC__}"
			EXITCODE=0
		else 
			adpn_help_notes "${SCRIPTPATH}" "${HELPCMD}" "${CMD}"
			EXITCODE=$?
		fi
		;;
		
	"test")
# @method adpn test 
#
# Usage: adpn test [<TESTCODE>] [<CMD>] [<ARGS>]...
#
# TESTCODE is a code identifying the test data packet to use. For a list of available
# tests, use:
#
# 	adpn test
#
# CMD is an adpn script pipeline command, e.g "preserve", "ingest", "publish"
# ARGS are the arguments for that pipeline command.
#
# @version 2019.0715

		TESTDIR="${SCRIPTDIR}/json/tests"
		if [[ ! -z "${_CMDLINE[2]}" ]] ; then
			TESTFILE=${TESTDIR}/${_CMDLINE[2]}.json
			if [[ -r "${TESTFILE}" ]] ; then
				"${_CMDLINE[0]}" "${_CMDLINE[@]:3}" ${TESTFILE}
				EXITCODE="$?"
			else
				echo "[${SCRIPT} ${CMD}] Use '${SCRIPT} ${CMD} [<TESTCODE>]'." 1>&2
				echo "" 1>&2
				echo "Available tests:" 1>&2
				cd $TESTDIR && ls ./*.json | sed 's/^.\//- /' | sed 's/[.]json$//' 1>&2
				EXITCODE=255
			fi
		else
			echo "[${SCRIPT} ${CMD}] Use '${SCRIPT} ${CMD} [<TESTCODE>]'." 1>&2
			echo "" 1>&2
			echo "Available tests:" 1>&2
			cd $TESTDIR && ls ./*.json | sed 's/^.\//- /' | sed 's/[.]json$//' 1>&2
			EXITCODE=255
		fi
		;;
		
	"property")
# @method adpn property
# Display property values from the configuration file (adpnet.json)
#
# Usage: adpn property [get <KEY>]
#
# Example: adpn property get "peer"
#
# Output: prints the value associated with <KEY> in the JSON hash table
# 
# 
# @version 2019.0715

		SUBCMD="${_ARGV[2]}"
		case "${SUBCMD}" in
			"")
				adpnprop
				;;
			"get")
				adpnprop "${_ARGV[3]}"
				EXITCODE=$?
				;;
			*)
				echo "[${SCRIPT} ${CMD}] '${SUBCMD}' command not understood." 1>&2
				EXITCODE=255
				;;
		esac
		;;
		
	"stage")
# @method adpn stage
# ADPNet Member: Stage AU files on the local workstation to the staging server.
#
# Usage: adpn stage [<LOCALPATH>] [<STAGING>] [<OPTIONS>]...
#
#   --subdirectory=<SLUG> 	destination subdirectory on staging server
#   --au_title=<TITLE>    	human-readable title of this AU
# 
# LOCALPATH is a directory on the local workstation containing the files for the
# Archival Unit (AU) to preserve. E.g.: "w:\WPA\Folder 01"
#
# STAGING is an URL specifying the FTP server and the path to the staging area to
# stage the AU files. E.g.: "ftp://charlesw.johnson@archives.alabama.gov/Lockss/"
#
# @version 2019.0715

		ASC_OUTPUT="$(mktemp)"

		adpn-stage-content.py --local="${_ARGV[2]}" --output=application/json --verbose=1 \
			--subdirectory="${_PARAM[subdirectory]}" \
			--au_title="${_PARAM[au_title]}" \
			"${_ARGV[3]}" > "${ASC_OUTPUT}" ; ASC_ERRCODE="$?"
		if [[ "${ASC_ERRCODE}" -lt 255 ]] ; then
			JSON_PACKET=$(grep "^JSON PACKET:" "${ASC_OUTPUT}")
			printf "%s" "${JSON_PACKET}"
		fi
		
		rm "${ASC_OUTPUT}"
		
		EXITCODE="${ASC_ERRCODE}"
		;;
		
	"preserve")
# @method adpn preserve
# ADPNet Member: Stage AU files on the local workstation to the staging area,
# test connection to staging server, collect data, and verify plugin parameters;
# then generate JSON and notify network admin that content is ready to ingest.
#
# Usage: adpn preserve [<LOCALPATH>] [<STAGING>] [<OPTIONS>]...
#
#   --subdirectory=<SLUG> 	destination subdirectory on staging server
#   --au_title=<TITLE>    	human-readable title of this AU
#   --from=<PEER>         	code for origin node (AUB, ADAH, etc.)
#
# LOCALPATH is a directory on the local workstation containing the files for the
# Archival Unit (AU) to preserve. E.g.: "w:\WPA\Folder 01"
#
# STAGING is an URL specifying the FTP server and the path to the staging area to
# stage the AU files. E.g.: "ftp://charlesw.johnson@archives.alabama.gov/Lockss/"
#
# Output: a report containing AU data, file size information, plugin parameters
# and a JSON packet for use by adpn ingest and adpn publish by Config Manager.
# Displayed to stdout; if adpn-do-preserve-email can find an e-mail client,
# it is also filled in to an e-mail to the Config Manager.
#
# @version 2019.0715

		echo "[${SCRIPT} ${CMD}] Staging content..."

		JSON_PACKET=$(
			${SCRIPT} stage "${_ARGV[2]}" "${_ARGV[3]}" \
			--au_title="${_PARAM[au_title]}" --subdirectory="${_PARAM[subdirectory]}"
		) ; ASC_ERRCODE="$?"
		
		if [[ "${ASC_ERRCODE}" -gt 0 ]] ; then
			echo "[${SCRIPT} ${CMD}] adpn stage failed." 1>&2
			EXITCODE="${ASC_ERRCODE}"
		else 
			[ ! -z "${_PARAM[from]}" ] && FROM="${_PARAM[from]}"  || FROM=$(${SCRIPT} property get "peer")
			if [[ -z "${FROM}" ]] ; then
				read -p "From (ALL|<PEER>): " FROM
			fi

			AIT_OUTPUT="$(mktemp)"
			echo "${JSON_PACKET}" | adpn-ingest-test - \
				--local="${_ARGV[2]}" --peer-from="${FROM}" > "${AIT_OUTPUT}" ; AIT_ERRCODE="$?"
			cat "${AIT_OUTPUT}"
			if [[ "${AIT_ERRCODE}" -gt 0 ]] ; then
				echo "[${SCRIPT} ${CMD}] adpn-ingest-test failed." 1>&2
				EXITCODE="${AIT_ERRCODE}"
			else
				cat "${AIT_OUTPUT}" | adpn-do-preserve-email --subject="ADPNet AU for Ingest: ${_PARAM[au_title]}"
			fi
			rm "${AIT_OUTPUT}"
		fi
		;;
		
	"ingest"|"publish")
# @method adpn ingest
# Config Manager: accept JSON data specifying a new AU for ingest,
# test connection to the staging server and verify parameters; then
# insert into local titlesdb and confirm insertion.
#
# Usage: adpn ingest [-|<JSONFILE>] [<OPTIONS>]...
#
# Options:
#   --from=<PEER>       	code for origin node (AUB, ADAH, etc.); overrides JSON data
#   --to=ALL|<PEER>         node to publish to (AUB, ADAH...; ALL=entire network)	
#   --dry-run           	output SQL script for titlesdb insert but do not execute
#   --sqldump=<SQLFILE> 	output SQL script for titlesdb to this file
#
# @version 2019.0829

# @method adpn publish
# Config Manager: accept JSON data specifying a new AU for ingest,
# test connection to the staging server and verify parameters; then
# insert into titlesdb for whole network and confirm insertion.
#
# Usage: adpn publish [-|<JSONFILE>] [<OPTIONS>]...
#
# Options:
#   --from=<PEER>       	code for origin node (AUB, ADAH, etc.); overrides JSON data
#   --dry-run           	output SQL script for titlesdb insert but do not execute
#   --sqldump=<SQLFILE> 	output SQL script for titlesdb to this file
#
# @version 2019.0715

		V="${_LINESWITCH[verbose]}"

		AIT_OUTPUT="$(mktemp)"
		AIT_INPUT="${_ARGV[2]}"
		if [[ -z "${AIT_INPUT}" ]] ; then
			AIT_INPUT="-"
		fi
		
		adpn-ingest-test "${AIT_INPUT}" --remote=1 ${V} > "${AIT_OUTPUT}"
		AIT_ERRCODE="$?"

		cat "${AIT_OUTPUT}" ; echo
		JSON_PACKET=$(grep "^JSON PACKET:" "${AIT_OUTPUT}" | cut --fields=2-)
		
		rm "${AIT_OUTPUT}"
		
		if [[ "${AIT_ERRCODE}" -gt 0 ]] ; then
			echo "[${SCRIPT} ${CMD}] adpn-ingest-test failed." 1>&2
			EXITCODE="${AIT_ERRCODE}"
		else

			INGEST_FROM="${_PARAM[from]}"
			if [[ -z "${INGEST_FROM}" ]] ; then
				INGEST_FROM=$(echo "${JSON_PACKET}" | adpn-json.py --key="From Peer")
				if [[ -z "${INGEST_FROM}" ]] ; then
					read -p "From (ALL|<PEER>): " INGEST_FROM
				fi
			fi

			INGEST_TO="${_PARAM[to]}"
			if [[ "publish" == "${CMD}" ]] ; then
				INGEST_TO="ALL"
			fi
			if [[ -z "${INGEST_TO}" ]] ; then
				INGEST_TO=$(echo "${JSON_PACKET}" | adpn-json.py --key="To Peer")
				if [[ -z "${INGEST_TO}" ]] ; then
					read -p "To (ALL|<PEER>): " INGEST_TO
				fi
			fi
			
			INGEST_DRY_RUN=""
			if [[ ! -z "${_PARAM[dry-run]}" ]] ; then
				INGEST_DRY_RUN="--dry-run"
			fi
			
			adpn-titlesdb-diff --before "${INGEST_TO}" ${V}

			AIIT_OUTPUT="${_PARAM[sqldump]}"
			if [[ -z "${AIIT_OUTPUT}" ]] ; then
				AIIT_OUTPUT="/dev/null"
			fi
			
			adpn-ingest-into-titlesdb.py --snapshot
			echo "${JSON_PACKET}" | adpn-ingest-into-titlesdb.py ${INGEST_DRY_RUN} --from="${INGEST_FROM}" --to="${INGEST_TO}" > "${AIIT_OUTPUT}" ; AIIT_ERRCODE="$?"
			
			if [[ "${AIIT_ERRCODE}" -gt 0 ]] ; then
				echo "[${SCRIPT} ${CMD}] adpn-ingest-into-titlesdb.py failed." 1>&2
				EXITCODE="${AIIT_ERRCODE}"
			else			
				adpn-titlesdb-diff --after "${INGEST_TO}" ${V} ; ATD_ERRCODE="$?"
				if [[ "${ATD_ERRCODE}" -gt 0 && -z "${INGEST_DRY_RUN}"  ]] ; then
					echo "[${SCRIPT} ${CMD}] adpn-titlesdb-diff failed." 1>&2
					EXITCODE="${ATD_ERRCODE}"
				else
					echo "" 1>&2
					echo "[${SCRIPT} ${CMD}] DONE: Archival Unit ingested into ${INGEST_FROM} titlesdb." 1>&2
				fi
			fi
		fi
		;;
	
	"plugins")
# @method adpn plugins
# List LOCKSS Publisher Plugins or display details for a selected Plugin.
# 
# Usage:
#   adpn plugins
#   adpn plugins list [<KEYWORDS>|/<REGEX>/|<GUID>|<JARURL>] [<OPTIONS>]...
#   adpn plugins details [<KEYWORDS>|/<REGEX>/|<GUID>|<JARURL>] [<OPTIONS>]...
#
# @version 2019.0716

		adpn-do-plugins "${_CMDLINE[@]:2}" ; EXITCODE="$?"
		;;
	
	*)
		echo "[${SCRIPT}] '${CMD}' command not understood." 1>&2
		echo "${__HELP__}" 1>&2
		EXITCODE=255
		;;
esac

##########################################################################################
### CLEANUP: remove temporary output file. ###############################################
##########################################################################################

exit ${EXITCODE}
