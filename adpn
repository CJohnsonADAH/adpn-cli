#!/bin/bash
#
# adpn: master script for scripted ADPNet operations.
#
# @version 2021.0525

SCRIPTPATH="$( which "$0" )"
SCRIPTPATH="$( readlink --canonicalize "${SCRIPTPATH}" )"
SCRIPTDIR="$( dirname "${SCRIPTPATH}" )"
SCRIPT="$( basename "${SCRIPTPATH}" )"
ME="${SCRIPTPATH}"

source "${SCRIPTDIR}/adpn-define-aliases"

__USAGE__="Usage: ${SCRIPT} [--version] [--help] <CMD> [<ARGS>]"
__HELP__="[${SCRIPT}] Try '${SCRIPT} help' for more information."
__DOC__="""${__USAGE__}

  --version 	Display the version of the script
  --help    	Display these usage notes

The most commonly used ${SCRIPT} commands are:
  preserve  	ADPNet Member: prepare an AU for preservation and notify config manager
  verify    	Node Manager: accept an AU from Member, test, and confirm accessibility from your node
  ingest    	Config Manager: accept a verified AU from Node, test, and insert into titlesdb
  publish   	Config Manager: publish an accepted Member's AU to the entire network
  help      	Display usage notes for the ${SCRIPT} script or for a given command
  
Exit codes:
0 = success (successful retrieval and expected result)
1-254 = error in executing command
255 = command not supported
"""

##########################################################################################
### COMMAND LINE: loop through switches ##################################################
##########################################################################################

declare -a _ARGV ; _ARGV=("$0")
declare -a _CMDLINE ; _CMDLINE=("$0")
declare -A _PARAM=([props-server]="" [xmldir]=~ [wget]="" )

shopt -s lastpipe

declare -a SWITCHFILES ; SWITCHFILES=()
if [[ -r "${CONFFILE}" ]] ; then
	SWITCHFILES+=(${CONFFILE})
fi

CMDLINETXT=$(mktemp)

until [[ "$#" -lt 1 ]] ; do
	_CMDLINE+=("$1")
	printf "%s\n" "$1" >> "${CMDLINETXT}"
	shift
done

SWITCHFILES+=(${CMDLINETXT})

adpn_command_line "${SWITCHFILES[@]}"

rm "${CMDLINETXT}"

##########################################################################################
### DEPENDENCIES: check for required command-line tools and Python scripts ###############
##########################################################################################

#declare -A DEPENDENCIES ; DEPENDENCIES=(
#	[mktemp]="command-line %s tool"
#	[grep]="command-line %s tool"
#	[unzip]="command-line %s tool"
#	[tr]="command-line %s tool"
#	[cut]="command-line %s tool"
#	[curl]="command-line %s tool"
#	[adpn-ingest-test]="%s Bash script"
#	[adpn-do-preserve-email]="%s Bash script"
#	[adpn-do-gitlab]="%s Bash script"
#	[adpn-do-rebalance]="%s Bash script"
#	[adpn-do-publisher]="%s Bash script"
#	[adpn-do-plugins]="%s Bash script"
#	[python3]="%s scripting environment"
#	[adpn-json.py]="%s Python script"
#	[adpn-stage-content.py]="%s Python script"
#	[adpn-ingest-into-titlesdb.py]="%s Python script"
#)

##########################################################################################
### SCRIPT: DETERMINE COMMAND, THEN EXECUTE PIPELINE  ####################################
##########################################################################################

EXITCODE=0
CMD="${_ARGV[1]}"

VV="${_LINESWITCH[verbose]}"
QQ="${_LINESWITCH[quiet]}"
V="${_LINESWITCH[verbose]}"
Q=""

DBG="${_LINESWITCH[debug]}"
DBGLEVEL="${_PARAM[debug]}"
if [[ "${DBGLEVEL}" == "debug" ]] ; then
	DBGLEVEL=1
fi
if [[ "${DBGLEVEL}" -gt 1 ]] ; then
	DBGLEVEL=$(( DBGLEVEL - 1 ))
	DDBG="--debug=${DBGLEVEL}"
else
	DDBG=""
fi

if [[ ! -z "${_PARAM[version]}" ]] ; then
	if [[ -z "${CMD}" ]] ; then
		CMD="version"
	else
		"${ME}" version
	fi
fi

if [[ ! -z "${_PARAM[help]}" ]] ; then
	CMD="help"
	_ARGV=( "help" "${_ARGV[@]}" )
fi

case "${CMD}" in
	"")
		echo "[${SCRIPT}] command expected (for example: '${SCRIPT} preserve', '${SCRIPT} ingest', etc.)" 1>&2
		echo "${__HELP__}" 1>&2
		EXITCODE=255
		;;
	
	"version")
# @method adpn version
# Displays current version of the adpn script.
#
# Usage: adpn version
#
# @version 2019.0808
		VERSION=$(grep "^# @version" $0 | head --lines=1 | cut --only-delimited --fields=3- --delimiter=" ")
		echo "${SCRIPT} version ${VERSION}"
		EXITCODE=0
		;;
		
	"help")
# @method adpn help
# Displays usage notes for the adpn script or a given adpn script command
#
# Usage: adpn help [<CMD>]
#
# CMD is an adpn script pipeline command, e.g. "preserve", "ingest", "publish"
# If omitted, display usage notes for the adpn script as a whole.
#
# @version 2019.0715
		HELPCMD="${_ARGV[2]}"
		if [[ -z "${HELPCMD}" ]] ; then
			echo "${__DOC__}"
			EXITCODE=0
		else 
			adpn_help_notes "${ME}" "${HELPCMD}" "${CMD}"
			EXITCODE=$?
		fi
		;;
		
	"test")
# @method adpn test 
#
# Usage: adpn test [<TESTCODE>] [<CMD>] [<ARGS>]...
#
# TESTCODE is a code identifying the test data packet to use. For a list of available
# tests, use:
#
# 	adpn test
#
# CMD is an adpn script pipeline command, e.g "preserve", "ingest", "publish"
# ARGS are the arguments for that pipeline command.
#
# @version 2019.0715

		TESTDIR="${SCRIPTDIR}/json/tests"
		if [[ ! -z "${_CMDLINE[2]}" ]] ; then
			TESTFILE=${TESTDIR}/${_CMDLINE[2]}.json
			if [[ -r "${TESTFILE}" ]] ; then
				"${_CMDLINE[0]}" "${_CMDLINE[@]:3}" ${TESTFILE}
				EXITCODE="$?"
			else
				echo "[${SCRIPT} ${CMD}] Use '${SCRIPT} ${CMD} [<TESTCODE>]'." 1>&2
				echo "" 1>&2
				echo "Available tests:" 1>&2
				cd $TESTDIR && ls ./*.json | sed 's/^.\//- /' | sed 's/[.]json$//' 1>&2
				EXITCODE=255
			fi
		else
			echo "[${SCRIPT} ${CMD}] Use '${SCRIPT} ${CMD} [<TESTCODE>]'." 1>&2
			echo "" 1>&2
			echo "Available tests:" 1>&2
			cd $TESTDIR && ls ./*.json | sed 's/^.\//- /' | sed 's/[.]json$//' 1>&2
			EXITCODE=255
		fi
		;;
	
	"setup")
# @method adpn setup
# Perform initial setup for adpn script in a new environment.
#
# Usage: adpn setup [--for=<CONTEXT>]
#
#    --for=preserve 	sets up adpn for use on your workstation to submit AUs
#    --for=verify   	sets up adpn for use on your preservation node to verify AUs
#    --for=ingest  		sets up adpn for use on the props server to ingest/publish AUs
#    --for=publish  	synonym for --for=ingest
#   
# @version 2021.0406

		# 0. DEPENDENCIES: Check external dependencies
		DEPENDENCIES="""
curl	%s command-line tool	apt install curl	yum install curl
unzip	%s command-line tool	apt install unzip	yum install unzip
python3	%s scripting environment	apt install python3	yum install python3
apt:python3-dev	%s system module	apt install python3-dev
yum:python3-devel	%s system module	yum install python3-devel
python3	%s scripting environment	apt install python3	yum install python3
python:bs4	%s Python module	apt install python3-bs4	python3 -m pip install bs4
python:socks	%s Python module	apt install python3-socks	python3 -m pip install pysocks
mysql_config	%s development tool	apt install libmysqlclient-dev	yum install mysql-devel
python:MySQLdb	%s Python module	python3 -m pip install mysqlclient
"""

		printf "* DEPENDENCIES: checking for dependencies.\n"
		printf "%s\n" "${DEPENDENCIES}" | adpn_check_dependencies - --interactive
		
		# 1. PATH: Set up a symbolic link to place adpn in the user's private bin dir
		MY_BINDIR="${HOME}/bin"
		printf "* PATH: Ensure that ${SCRIPT} is accessible through ${MY_BINDIR}\n" 1>&2
		if [[ ! -d "${MY_BINDIR}" ]] ; then
			printf "\n"
			mkdir -v "${MY_BINDIR}"
			printf "\n"
		fi
		if [[ "${SCRIPTDIR}" != "${MY_BINDIR}" ]] ; then
			SCRIPTALIAS="${MY_BINDIR}/${SCRIPT}"
			if [[ ! -x "${MY_BINDIR}/${SCRIPT}" ]] ; then
				printf "\n"
				ln --verbose --symbolic --logical --backup "${SCRIPTPATH}" "${SCRIPTALIAS}"
				printf "\n"
			fi
		fi
		
		# 2. SETTINGS: Generate an adpnet.json file in the user's home dir, then place a symlink in the bindir
		MY_CONFDIR="${HOME}/.adpn"
		JSONFILENAME="$( basename "${JSONCONFFILE}" )"
		printf "* SETTINGS: Ensure that ${JSONFILENAME} is accessible through ${MY_CONFDIR}\n" 1>&2
		if [[ ! -d "${MY_CONFDIR}" ]] ; then
			printf "\n"
			mkdir -v "${MY_CONFDIR}"
			printf "\n"
		fi
		if [[ ! -r "${JSONCONFFILE}" ]] ; then
			MY_CONFFILE="${MY_CONFDIR}/${JSONFILENAME}"
			if [[ ! -r "${MY_CONFFILE}" ]] ; then
				echo "{}" >	"${MY_CONFFILE}"
				declare -A AS_PROPS=()
				printf "* SETTINGS: Let's set up some properties for ${MY_CONFFILE}.\n" 1>&2
				printf "  N.B.: Not all of these settings need to be filled in on all systems.\n" 1>&2
				printf "\n" 1>&2
				
				AS_CONTEXT="$( [[ -z "${_PARAM[for]}" ]] && echo "preserve" || echo "${_PARAM[for]}" )"
				AS_CONTEXT="$( printf "%s" "${AS_CONTEXT}" | tr "[:upper:]" "[:lower:]" )"
				
				IFS=""
				if [[ "${AS_CONTEXT}" =~ ^(preserve)$ ]] ; then
					read -ep "Institution: " AS_PROPS[institution]
					read -ep "Publisher Code (ADAH, AUB, ...): " AS_PROPS[publisher]
				fi
				
				if [[ "${AS_CONTEXT}" =~ ^(ingest|publish)$  ]] ; then
				
					read -ep "LOCKSS Daemon URL: " AS_PROPS[daemon]
					if [[ -n "${AS_PROPS[daemon]}" ]] ; then
						read -ep "LOCKSS Daemon User: " AS_PROPS[daemon/user]
						if [[ -n "${AS_PROPS[daemon/user]}" ]] ; then
							read -sep "LOCKSS Daemon Password: " AS_PROPS[daemon/pass]
							printf "\n"
						fi
					fi
					
				fi

				if [[ "${AS_CONTEXT}" =~ ^(preserve|verify|ingest|publish)$ ]] ; then
					KEY="stage/jar" DEFAULT="http://configuration.adpn.org/overhead/takeover/plugins/AuburnDirectoryPlugin.jar"
					read -ep "Default Plugin JAR [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
				fi
				
				DROP_SERVER="drop.adpn.org"
				if [[ "${AS_CONTEXT}" =~ ^(preserve)$ ]] ; then
					DROP_SERVER_USER="$( printf "%s" "${AS_PROPS[publisher]}" | tr '[:upper:]' '[:lower:]' )"
					
					KEY="stage/host" DEFAULT="${DROP_SERVER}"
					read -ep "Drop Server [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
					
					KEY="stage/user" DEFAULT="${DROP_SERVER_USER}"
					read -ep "Drop Server Account [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"

					KEY="base_url" DEFAULT="http://${DROP_SERVER}/drop-server/${DROP_SERVER_USER}/drop_au_content_in_here/"
					read -ep "Staging Area Base URL [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"

				fi
				
				if [[ "${AS_CONTEXT}" =~ ^(preserve|verify|ingest|publish)$ ]] ; then
					KEY="preserve/admin-email" DEFAULT="ADPNet TPC <adpntpc@auburn.edu>"
					read -ep "Staging Admin E-mail [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
				fi
				
				if [[ "${AS_CONTEXT}" =~ ^(verify)$ ]] ; then
					read -ep "Peer Node (ADAH, AUB1, AUB2, ...): " AS_PROPS[peer]					
				fi
				
				if [[ "${AS_CONTEXT}" =~ ^(preserve|ingest|publish)$ ]] ; then
					KEY="node-server/ssh" DEFAULT="" PROMPT_DEFAULT="(e.g.: user@host)"
					if [[ -n "${AS_PROPS[daemon]}" ]] ; then
						NODE_SERVER=$( printf "%s" "${AS_PROPS[daemon]}" | cut --delimiter=":" --field=1 )
						DEFAULT="${USER}@${NODE_SERVER}"
						PROMPT_DEFAULT="[${DEFAULT}]"
					fi
					read -ep "Node Server SSH Identity ${PROMPT_DEFAULT}: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
				fi
				
				PROPS_SERVER="configuration.adpn.org"
				if [[ "${AS_CONTEXT}" =~ ^(ingest|publish)$ ]] ; then
					KEY="props-server" DEFAULT="http://${PROPS_SERVER}/"
					read -ep "Props Server URL [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"

					KEY="mysql/host" DEFAULT="localhost"
					read -ep "[titlesdb] MySQL Server [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
					if [[ -n "${AS_PROPS[mysql/host]}" ]] ; then
						KEY="mysql/db" DEFAULT="adpn"
						read -ep "[titlesdb] MySQL Database [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
						if [[ -n "${AS_PROPS[mysql/db]}" ]] ; then
							KEY="mysql/user" DEFAULT="${USER}"
							read -ep "[titlesdb] MySQL User [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
							if [[ -n "${AS_PROPS[mysql/user]}" ]] ; then
								read -sep "[titlesdb] MySQL Password: " AS_PROPS[mysql/password]
								printf "\n"
							fi
						fi
					fi
	
					KEY="props/titlesdb.xml" DEFAULT="/var/www/html/overhead/takeover/lockss/titlesdb.xml"
					read -ep "[titlesdb] TitlesDB XML Location [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
					KEY="xmldir" DEFAULT="${HOME}/titlesdb-xml"
					read -ep "[titlesdb] XML Working Directory [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"

				fi
				
				if [[ "${AS_CONTEXT}" =~ ^(preserve|verify)$ ]] ; then
					KEY="props-server/ssh" DEFAULT="${USER}@${PROPS_SERVER}"
					read -ep "Props Server SSH Identity [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
				fi
				
				if [[ "${AS_CONTEXT}" =~ ^(preserve|verify|ingest|publish)$ ]] ; then
					KEY="gitlab/base" DEFAULT="https://gitlab.com/api/v4/%s"
					read -ep "Gitlab API URL [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
					KEY="gitlab/repository" DEFAULT="adpnet/adpn---general"
					read -ep "Gitlab Repository [${DEFAULT}]: " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
					KEY="gitlab/token" DEFAULT=""
					read -ep "Gitlab Personal Access Token (see <https://gitlab.com/-/profile/personal_access_tokens>): " AS_PROPS[$KEY] ; AS_PROPS[$KEY]="${AS_PROPS[$KEY]:-$DEFAULT}"
				fi
				
				declare -a AS_KEYS=()
				IFS="" printf "%s\n" "${!AS_PROPS[@]}" | sort | while read -r KEY ; do
					if [[ -n "${AS_PROPS[$KEY]}" ]] ; then
						printf "%s property set %s '%s'\n" "\$ ${SCRIPT}" "${KEY}" "${AS_PROPS[$KEY]}"  1>&2
						"${ME}" property set "${KEY}" "${AS_PROPS[$KEY]}" --quiet
					fi
				done
			fi
			printf "\n"
			ln --verbose --symbolic --logical --backup "${MY_CONFFILE}" "${JSONCONFFILE}"
			printf "\n"
		fi

		# 3. PATH: If we are setting up a props node, and we set a work directory for XML diffs, go ahead and create it.
		xmldir="$(adpnprop xmldir)"
		if [[ -n "${xmldir}" ]] ; then
			printf "* XML PATH: Ensure that working directory is available at ${xmldir}\n" 1>&2
			if [[ ! -d "${xmldir}" ]] ; then
				printf "\n"
				mkdir --verbose --parents "${xmldir}"
				printf "\n"
			fi
		fi

		EXITCODE=0
		;;
		
	"property")
# @method adpn property
# Display property values from the configuration file (adpnet.json)
#
# Usage: adpn property [list|get <KEY>|set <KEY> <VALUE>]
#
# Example: adpn property get "peer"
#
# Output:
# * adpn property list # lists the available settings from the JSON hash table
# * adpn property get <KEY> # prints the value associated with <KEY> in the JSON hash table
# * adpn property set <KEY> <VALUE> # sets the value associated with <KEY> to <VALUE>
# 
# @version 2021.0406

		SUBCMD="${_ARGV[2]}"
		case "${SUBCMD}" in
			""|"list")
				adpnprop
				printf "\n"
				;;
			"get")
				adpnprop "${_ARGV[3]}"
				EXITCODE=$?
				;;
			"set")
				declare -a WORDS
				WORDS=( "${_ARGV[@]:3}" )
				if [[ -n "${_PARAM[key]}" ]] ; then
					KEY="${_PARAM[key]}"
				elif [[ -n "${WORDS[0]}" ]] ; then
					KEY="${WORDS[0]}"
					WORDS=( "${WORDS[@]:1}" )
				fi
				
				if [[ -n "${_PARAM[value]}" ]] ; then
					VALUE="${_PARAM[value]}"
				elif [[ -n "${WORDS[0]}" ]] ; then
					VALUE="${WORDS[0]}"
					WORDS=( "${WORDS[@]:1}" )
				fi
				
				APS_OUTPUT=$(mktemp)

				JSON_KEYVALUE="$( adpn-json.py --key="${KEY}" --value="${VALUE}" )"
				JSON_OTHERS="$( adpnprop --output=application/json )"
				printf "%s\n%s\n" "${JSON_OTHERS}" "${JSON_KEYVALUE}" | adpn-json.py --output="application/json;prettyprint" --cascade > "${APS_OUTPUT}"
				printf "\n" >> "${APS_OUTPUT}"

				JSONORIGINAL="$( readlink -f "${JSONCONFFILE}" )"
				JSONBACKUP="$( printf "%s~" "${JSONORIGINAL}" )"
				if [[ -r "${JSONORIGINAL}" ]] ; then
					cp "${JSONORIGINAL}" "${JSONBACKUP}"
				else
					printf "{}\n" > "${JSONBACKUP}"
				fi
				mv "${APS_OUTPUT}" "${JSONORIGINAL}"
				if [[ -z "${_PARAM[quiet]}" ]] ; then
					diff -u --color "${JSONBACKUP}" "${JSONORIGINAL}"
				fi
				
				EXITCODE=0
				;;
			*)
				echo "[${SCRIPT} ${CMD}] '${SUBCMD}' command not understood." 1>&2
				EXITCODE=255
				;;
		esac
		;;
		
	"stage")
# @method adpn stage
# ADPNet Member: Stage AU files on the local workstation to the staging server.
#
# Usage: adpn stage [<LOCALPATH>] [<STAGING>] [<OPTIONS>]...
#
#   --subdirectory=<SLUG> 	destination subdirectory on staging server
#   --au_title=<TITLE>    	human-readable title of this AU
# 
# LOCALPATH is a directory on the local workstation containing the files for the
# Archival Unit (AU) to preserve. E.g.: "w:\WPA\Folder 01"
#
# STAGING is an URL specifying the FTP server and the path to the staging area to
# stage the AU files. E.g.: "ftp://charlesw.johnson@archives.alabama.gov/Lockss/"
#
# @version 2019.0715

		ASC_OUTPUT="$(mktemp)"

		adpn-stage-content.py --local="${_ARGV[2]}" --output=application/json --verbose=1 \
			--subdirectory="${_PARAM[subdirectory]}" \
			--au_title="${_PARAM[au_title]}" \
			"${_ARGV[3]}" > "${ASC_OUTPUT}" ; ASC_ERRCODE="$?"
		if [[ "${ASC_ERRCODE}" -lt 255 ]] ; then
			JSON_PACKET=$( adpn_get_json_packet "${ASC_OUTPUT}" )
			printf "%s" "${JSON_PACKET}"
		fi
		
		rm "${ASC_OUTPUT}"
		
		EXITCODE="${ASC_ERRCODE}"
		;;
		
	"preserve")
# @method adpn preserve
# ADPNet Member: Stage AU files on the local workstation to the staging area,
# test connection to staging server, collect data, and verify plugin parameters;
# then generate JSON and notify network admin that content is ready to ingest.
#
# Usage: adpn preserve [<LOCALPATH>] [<STAGING>] [<OPTIONS>]...
#
#   --subdirectory=<SLUG> 	destination subdirectory on staging server
#   --au_title=<TITLE>    	human-readable title of this AU
#   --from=<PEER>         	code for origin node (AUB, ADAH, etc.)
#
# LOCALPATH is a directory on the local workstation containing the files for the
# Archival Unit (AU) to preserve. E.g.: "w:\WPA\Folder 01"
#
# STAGING is an URL specifying the FTP server and the path to the staging area to
# stage the AU files. E.g.: "ftp://charlesw.johnson@archives.alabama.gov/Lockss/"
#
# Output: a report containing AU data, file size information, plugin parameters
# and a JSON packet for use by adpn ingest and adpn publish by Config Manager.
# Displayed to stdout; if adpn-do-preserve-email can find an e-mail client,
# it is also filled in to an e-mail to the Config Manager.
#
# @version 2019.0715

		echo "[${SCRIPT} ${CMD}] Staging content..."

		JSON_PACKET=$(
			${SCRIPT} stage "${_ARGV[2]}" "${_ARGV[3]}" \
			--au_title="${_PARAM[au_title]}" --subdirectory="${_PARAM[subdirectory]}"
		) ; ASC_ERRCODE="$?"
		
		if [[ "${ASC_ERRCODE}" -gt 0 ]] ; then
			echo "[${SCRIPT} ${CMD}] adpn stage failed." 1>&2
			EXITCODE="${ASC_ERRCODE}"
		else 
			[ ! -z "${_PARAM[from]}" ] && FROM="${_PARAM[from]}"  || FROM=$(${SCRIPT} property get "peer")
			if [[ -z "${FROM}" ]] ; then
				read -p "From (ALL|<PEER>): " FROM
			fi

			AIT_OUTPUT="$(mktemp)"
			echo "${JSON_PACKET}" | adpn-ingest-test - \
				--local="${_ARGV[2]}" --peer-from="${FROM}" > "${AIT_OUTPUT}" ; AIT_ERRCODE="$?"
			cat "${AIT_OUTPUT}"
			if [[ "${AIT_ERRCODE}" -gt 0 ]] ; then
				echo "[${SCRIPT} ${CMD}] adpn-ingest-test failed." 1>&2
				EXITCODE="${AIT_ERRCODE}"
			else
				cat "${AIT_OUTPUT}" | adpn-do-preserve-email --subject="ADPNet AU for Ingest: ${_PARAM[au_title]}"
			fi
			rm "${AIT_OUTPUT}"
		fi
		;;
	
	"verify")
# @method adpn verify
# Peer Manager, Config Manager: accept JSON data specifying a new AU for ingest
# test connection to the staging server and verify parameters
#
# Usage: adpn verify [-|<JSONFILE>] [<OPTIONS>]
#
# Options:
#    --from=<PUB> 	code for origin publisher (AUB, ADAH, etc.); overrides JSON data
#    --to=<PEER>   	node to publish to (AUB1, AUB2, ADAH, ...; ALL=entire network)
#    --peer=<PEER> 	synonym for --to=<PEER>
#
# @version 2021.0318

		if [[ -n "${_PARAM[pipeline]}" ]] ; then
			PIPELINE="${_LINESWITCH[pipeline]}"
			PIPEDFROMTO="${_PARAM[pipeline]}"
		else
			PIPEDFROMTO="staged:verified"
			PIPELINE="--pipeline=${PIPEDFROMTO}"
		fi
		if [[ -n "${PIPEDFROMTO}" ]] ; then
			PIPEDFROM=$( printf "%s" "${PIPEDFROMTO}" | cut --field=1 --delimiter=":" )
			PIPEDTO=$( printf "%s" "${PIPEDFROMTO}" | cut --field=2 --delimiter=":" )
			if [[ "${DBGLEVEL}" -ge 2 ]] ; then
				printf "SWITCH='%s', PIPELINE='%s': PIPEDFROM='%s', PIPEDTO='%s'\n" "${_LINESWITCH[pipeline]}" "${PIPEDFROMTO}" "${PIPEDFROM}" "${PIPEDTO}" 1>&2
			fi
		fi
		
		declare -a TEMP_CLEANUP=()

		PACKET_SOURCE="${_ARGV[2]}"
		AIT_PACKETS="$(mktemp)" ; TEMP_CLEANUP+=( "${AIT_PACKETS}" )
		AIT_INPUT="$(mktemp)" ; TEMP_CLEANUP+=( "${AIT_INPUT}" )
		AIT_OUTPUT="$(mktemp)" ; TEMP_CLEANUP+=( "${AIT_OUTPUT}" )

		GITLAB_ISSUE=$( "${ME}" gitlab parse "${PACKET_SOURCE}" )
		
		if [[ -z "${PACKET_SOURCE}" || "${PACKET_SOURCE}" == "-" ]] ; then
			cat - > "${AIT_PACKETS}"
		elif [[ -r "${PACKET_SOURCE}" ]] ; then
			cp "${PACKET_SOURCE}" "${AIT_PACKETS}"		
		elif [[ -n "${GITLAB_ISSUE}" ]] ; then
			if [[ -n "${V}" ]] ; then
				printf "* Retrieving JSON for Gitlab issue: %s\n" "${GITLAB_ISSUE}" 1>&2
			fi		
			"${ME}" gitlab get packet "${GITLAB_ISSUE}" "${AGGP_SW[@]}" > "${AIT_PACKETS}"
			EXITCODE="$?"
		else
			printf "[%s] WARNING: Cannot locate any AU data from: '%s'\n" "${SCRIPT} ${CMD}" "${PACKET_SOURCE}" 1>&2
			EXITCODE=1
		fi
		
		if [[ -r "${AIT_PACKETS}" ]] ; then	
			# 1. Do we have a packet with "Ingest Step" = $PIPEDFROM? If so, prefer that one.
			if [[ -n "${DBG}" ]] ; then
				printf 'cat "%s" | adpn-json.py --output=application/json --where="Ingest Step:%s"\n' "${AIT_PACKETS}" "${PIPEDFROM}" 1>&2
			fi
			
			GREP=$( cat "${AIT_PACKETS}" | adpn-json.py --parse --output=application/json --where="Ingest Step:${PIPEDFROM}" )
			if [[ -n "${GREP}" ]] ; then
				printf "%s" "${GREP}" | head -n 1 > "${AIT_INPUT}"
			fi
			
			# 2. If not, let's take the FIRST packet that seems to be available. (verify=early)
			if [[ -z "${GREP}" ]] ; then
				if [[ -n "${DBG}" ]] ; then
					printf 'cat "%s" | adpn_get_json_packet | head -n 1\n' "${AIT_PACKETS}" 1>&2
				fi
				
				GREP=$( cat "${AIT_PACKETS}" | adpn_get_json_packet | head -n 1 )
				if [[ "${GREP}" ]] ; then
					printf "%s" "${GREP}" > "${AIT_INPUT}"
				fi
			fi
			
			if [[ "${DBGLEVEL}" -gt 1 ]] ; then
				printf "* DBG: JSON source (%s) = <<<EOF\n%s\nEOF;\n" "${AIT_INPUT}" "${GREP}" 1>&2
			fi
			
		fi
		
		if [[ -r "${AIT_INPUT}" ]] ; then
			PEER_TO=$( [[ -n "${_PARAM[to]}" ]] && printf "%s" "${_PARAM[to]}" || printf "%s" "${_PARAM[peer]}" )
			if [[ -z "${PEER_TO}" ]] ; then
				PEER_TO=$( adpnprop "peer" )
			fi
			if [[ -n "${PEER_TO}" ]] ; then
				PEER_TO=$( printf "%s--peer-to=%s" "" "${PEER_TO}" )
			fi

			if [[ -n "${DBG}" ]] ; then
				printf '[DBG] $ adpn-ingest-test "%s" --remote=1 "%s" "%s" %s %s > "%s"\n' "${AIT_INPUT}" "${PEER_TO}" "${PIPELINE}" "${V}" "${DDBG}" "${AIT_OUTPUT}" 1>&2 
			fi
		
			adpn-ingest-test "${AIT_INPUT}" --remote=1 "${PEER_TO}" "${PIPELINE}" ${V} ${DDBG} > "${AIT_OUTPUT}"
			EXITCODE="$?"

			cat "${AIT_OUTPUT}" ; echo
		fi
		
		for TMP in "${TEMP_CLEANUP[@]}" ; do
			rm "${TMP}"
		done

		if [[ "${EXITCODE}" -gt 0 ]] ; then
			echo "[${SCRIPT} ${CMD}] adpn-ingest-test failed." 1>&2
		fi
		;;
		
	"post"|"ingest")
# @method adpn post
# Config Manager: accept JSON data specifying a new AU for ingest,
# test connection to the staging server and verify parameters; then
# insert into local titlesdb and confirm insertion.
#
# Usage: adpn post [-|<JSONFILE>] [<OPTIONS>]...
#
# Options:
#   --from=<PEER>       	code for origin node (AUB, ADAH, etc.); overrides JSON data
#   --to=ALL|<PEER>     	node to publish to (AUB, ADAH...; ALL=entire network)	
#   --dry-run           	output SQL script for titlesdb insert but do not execute
#   --sqldump=<SQLFILE> 	output SQL script for titlesdb to this file
#
# @version 2021.0420

# @method adpn ingest
# Config Manager: synonym for `adpn post`
#
# @version 2021.0420

		AV_OUTPUT="$(mktemp)"
		
		if [[ "${_PARAM[pipeline]}" ]] ; then
			PIPELINE="${_LINESWITCH[pipeline]}"
		else
			PIPELINE="--pipeline=verified:ingested"
		fi
		
		"${ME}" verify "${_CMDLINE[@]:2}" ${PIPELINE} > "${AV_OUTPUT}"
		AV_ERRCODE="$?"

		cat "${AV_OUTPUT}" ; echo
		JSON_PACKET=$(grep "^JSON PACKET:" "${AV_OUTPUT}" | cut --fields=2-)
		
		rm "${AV_OUTPUT}"
		
		if [[ "${AV_ERRCODE}" -gt 0 ]] ; then
			echo "[${SCRIPT} ${CMD}] ${SCRIPT} verify failed." 1>&2
			EXITCODE="${AV_ERRCODE}"
		
		else 

			INGEST_FROM="${_PARAM[from]}"
			if [[ -z "${INGEST_FROM}" ]] ; then
				INGEST_FROM=$(echo "${JSON_PACKET}" | adpn-json.py --key="From Peer")
				if [[ -z "${INGEST_FROM}" ]] ; then
					read -p "From (ALL|<PEER>): " INGEST_FROM
				fi
			fi

			INGEST_TO=$( [[ -n "${_PARAM[to]}" ]] && printf "%s" "${_PARAM[to]}" || printf "%s" "${_PARAM[peer]}" )
			if [[ -z "${INGEST_TO}" ]] ; then
				INGEST_TO=$(echo "${JSON_PACKET}" | adpn-json.py --key="To Peer")
				if [[ -z "${INGEST_TO}" ]] ; then
					read -p "To (ALL|<PEER>): " INGEST_TO
				fi
			fi
			
			INGEST_DRY_RUN="$( [[ ! -z "${_PARAM[dry-run]}" ]] && printf "%s" "--dry-run" || printf "%s" "" )"
			
			adpn-titlesdb-diff --before "${INGEST_TO}" ${V}

			AIIT_OUTPUT="${_PARAM[sqldump]}"
			if [[ -z "${AIIT_OUTPUT}" ]] ; then
				[[ -z "${INGEST_DRY_RUN}" ]] && AIIT_OUTPUT="/dev/null" || AIIT_OUTPUT="/dev/tty"
			fi
			
			adpn-ingest-into-titlesdb.py --snapshot
			echo "${JSON_PACKET}" | adpn-ingest-into-titlesdb.py ${INGEST_DRY_RUN} --from="${INGEST_FROM}" --to="${INGEST_TO}" > "${AIIT_OUTPUT}" ; AIIT_ERRCODE="$?"
			
			if [[ "${AIIT_ERRCODE}" -gt 0 ]] ; then
				echo "[${SCRIPT} ${CMD}] adpn-ingest-into-titlesdb.py failed." 1>&2
				EXITCODE="${AIIT_ERRCODE}"
			else			
				adpn-titlesdb-diff --after "${INGEST_TO}" ${V} ; ATD_ERRCODE="$?"
				if [[ "${ATD_ERRCODE}" -gt 0 && -z "${INGEST_DRY_RUN}"  ]] ; then
					echo "[${SCRIPT} ${CMD}] adpn-titlesdb-diff failed." 1>&2
					EXITCODE="${ATD_ERRCODE}"
				elif [[ -z "${_PARAM[context]}" ]] ; then
					echo "" 1>&2
					echo "[${SCRIPT} ${CMD}] DONE: Archival Unit posted to ${INGEST_TO} titlesdb." 1>&2
				fi
			fi
		fi
		;;
		
	"promote"|"publish")
# @method adpn publish
# Config Manager: accept JSON data specifying a new AU for ingest,
# test connection to the staging server and verify parameters; then
# insert into titlesdb for whole network and confirm insertion.
#
# Usage: adpn publish [-|<JSONFILE>] [<OPTIONS>]...
#
# Options:
#   --from=<PEER>       	code for origin node (AUB, ADAH, etc.); overrides JSON data
#   --dry-run           	output SQL script for titlesdb insert but do not execute
#   --sqldump=<SQLFILE> 	output SQL script for titlesdb to this file
#
# @version 2021.0420

# @method adpn publish
# Config Manager: synonym for `adpn promote`
#
# @version 2021.0420


		AI_OUTPUT="$(mktemp)"
		"${ME}" post "${_CMDLINE[@]:2}" --to=ALL --pipeline=ingested:published --context="${SCRIPT} ${CMD}" > "${AI_OUTPUT}"
		AI_ERRCODE="$?"

		cat "${AI_OUTPUT}"
		JSON_PACKET=$(grep "^JSON PACKET:" "${AI_OUTPUT}" | cut --fields=2-)
		
		rm "${AI_OUTPUT}"

		if [[ "${AI_ERRCODE}" -gt 0 ]] ; then
			echo "[${SCRIPT} ${CMD}] ${SCRIPT} post failed." 1>&2
			EXITCODE="${AI_ERRCODE}"
		
		else
			printf "\n" 1>&2
			printf "[${SCRIPT} ${CMD}] DONE: Archival Unit published to titlesdb.\n" 1>&2

			TDB_XML=$( adpnprop "props/titlesdb.xml" )
			if [[ -r "${TDB_XML}" ]] ; then

				TDB_PATH=$( readlink -f "${TDB_XML}" )
				TDB_DIR=$( dirname "${TDB_PATH}" )
				TDB_FILE=$( basename "${TDB_PATH}" )
				
				printf "\n"
				printf "* Generating new static %s for network..." "${TDB_FILE}"

				cd "${TDB_DIR}"
				adpn-titlesdb-diff --before="${TDB_PATH}" --stype=1

				printf " (ok)\n"

				printf "* Comparing new %s to prior revision...\n\n"
				
				if [[ -z "${_PARAM[batch]}" ]] ; then
					git add --patch "${TDB_FILE}" < /dev/tty
				else
					git add "${TDB_FILE}"
				fi

				AU_TITLE=$(echo "${JSON_PACKET}" | adpn-json.py --key="Ingest Title")
				GC_MESSAGE=$( printf "Promoted new AU (%s)" "${AU_TITLE}" )

				git commit --message "${GC_MESSAGE}" 

			else 
			
				printf "[${SCRIPT} ${CMD}] Warning: Could not locate static titlesDb XML file at [%s], so the new version was not generated.\n" "${TDB_XML}" 1>&2
				
			fi
			
		fi
		;;

	"gitlab")
		adpn-do-gitlab "${_CMDLINE[@]:2}" --context="${SCRIPT} ${CMD}" ; EXITCODE="$?"
		;;

	"serve")
# @method adpn serve
# Preservation Node Manager: Helps retrieve content preserved on a LOCKSS box.
#
# @version 2021.0319

		[[ -n "${_PARAM[daemon-user]}" ]] && HTTP_USER="${_PARAM[daemon-user]}" || HTTP_USER="$(adpnprop daemon/user)"
		[[ -n "${_PARAM[daemon-pass]}" ]] && HTTP_PASS="${_PARAM[daemon-pass]}" || HTTP_PASS="$(adpnprop daemon/pass)"
		
		if [[ -z "${HTTP_USER}" ]] ; then
			read -p "LOCKSS Daemon User: " HTTP_USER
		fi
		if [[ -z "${HTTP_PASS}" ]] ; then
			read -sp "LOCKSS Daemon Password: " HTTP_PASS
		fi
		
		VERSION=1
		LOCKSS_BOX="localhost:8081"
		BASE_URL="http://drop.adpn.org/drop-server/adah/drop_au_content_in_here/"
		DIRECTORY="${_PARAM[directory]}"
		FILE="${_PARAM[file]}"
		
		FULL_URL=$( printf "%s%s/%s" "${BASE_URL}" "${DIRECTORY}" "${FILE}" )
		ENCODED_URL=$( rawurlencode "${FULL_URL}" )
		
		AU_ID_BASE='edu|auburn|adpn|directory|AuburnDirectoryPlugin&base_url~%s&directory~%s'
		AU_ID=$( printf "${AU_ID_BASE}" $(rawurlencode "${BASE_URL}" 2) $(rawurlencode "${DIRECTORY}" 2) )
		ENCODED_AU_ID=$( rawurlencode "${AU_ID}" )
		
		declare -a HT_PARAMS=()
		
		PARAM_URL="$( printf "url=%s" "${ENCODED_URL}" )"
		PARAM_AUID="$( printf "auid=%s" "${ENCODED_AU_ID}" )"
		PARAM_VERSION="$( printf "version=%d" "${VERSION}" )"
		
		HT_PARAMS+=( "${PARAM_URL}" )
		HT_PARAMS+=( "${PARAM_AUID}" )
		HT_PARAMS+=( "${PARAM_VERSION}" )
		
		HT_ARGS=$( join_by "&" "${HT_PARAMS[@]}" )

		OUTPUT_FILENAME="$( rawurlencode "${FILE}" )"
		wget "http://localhost:8081/ServeContent?${HT_ARGS}" --http-user="${HTTP_USER}" --http-password="${HTTP_PASS}" -O "${OUTPUT_FILENAME}"
		;;
			
	"rebalance")
# @method adpn rebalance
# Config Manager: Helps rebalance cached AUs on a LOCKSS cache.
#
# Usage:
# 
#   adpn rebalance
#   adpn rebalance script
#   adpn rebalance destination
#   adpn rebalance lockdown
#   adpn rebalance sync
#   adpn rebalance reregister
#
# @version 2021.0302

		adpn-do-rebalance "${_CMDLINE[@]:2}" --context="${SCRIPT} ${CMD}" ; EXITCODE="$?"
		;;

	"publisher")
# @method adpn publisher
# Config Manager: Helps review and manage the list of AU publishers on a LOCKSS props server.
#
# Usage:
# 
#   adpn publisher
#   adpn publisher list
#   adpn publisher add [<AU_PUB_ID>] [<PUBLISHER_NAME>]
#
# @version 2021.0302
		MYSQL_HOST="$( adpnprop 'mysql/host' )"
		SSH_REMOTE="$( adpnprop 'props-server/ssh' )"
		if [[ -n "${MYSQL_HOST}"  ]] ; then
			adpn-do-publisher --context="${SCRIPT} ${CMD}" "${_CMDLINE[@]:2}" ; EXITCODE="$?"
		elif [[ -n "${SSH_REMOTE}" ]] ; then
			
			SSH_HOST="$( printf "%s" "${SSH_REMOTE}" | cut --field=1 --delimiter=":" )"
			SSH_CMD="$( printf "%s" "${SSH_REMOTE}" | cut --field=2 --delimiter=":" --only-delimited )"
			
			if [[ -n "${SSH_HOST}" ]] ; then
				if [[ -z "${SSH_CMD}" ]] ; then
					SSH_CMD=bin/adpn-cli/adpn
				fi
				SSH_CMD_SLUG="$( basename "${SSH_CMD}" )"
				
				SSH_CMDLINE="$( printf "%q" "${SSH_CMD}" )"
				for ARG in "${_CMDLINE[@]:1}" ; do
					SSH_CMDLINE="$( printf "%s %q" "${SSH_CMDLINE}" "${ARG}" )"
				done

				if [[ -z "${QQ}" ]] ; then
					printf "[${SCRIPT} ${CMD}] * Connecting to %s to execute: %s\n" "${SSH_HOST}" "${SSH_CMDLINE}" 1>&2
				fi
				
				ssh "${SSH_HOST}" "${SSH_CMDLINE}"
			
				if [[ -z "${QQ}" ]] ; then
					printf "[${SCRIPT} ${CMD}] * Disconnected from %s\n" "${SSH_HOST}" 1>&2
				fi
			fi
		fi
		
		;;
	
	"plugins")
# @method adpn plugins
# List LOCKSS Publisher Plugins or display details for a selected Plugin.
# 
# Usage:
#   adpn plugins
#   adpn plugins list [<KEYWORDS>|/<REGEX>/|<GUID>|<JARURL>] [<OPTIONS>]...
#   adpn plugins details [<KEYWORDS>|/<REGEX>/|<GUID>|<JARURL>] [<OPTIONS>]...
#
# @version 2019.0716

		adpn-do-plugins --context="${SCRIPT} ${CMD}" "${_CMDLINE[@]:2}" ; EXITCODE="$?"
		;;
	
	"echo")
		declare -p _LINESWITCH
		declare -p _ARGV
		declare -p _PARAM
		;;
		
	*)
		echo "[${SCRIPT}] '${CMD}' command not understood." 1>&2
		echo "${__HELP__}" 1>&2
		EXITCODE=255
		;;
esac

##########################################################################################
### CLEANUP: remove temporary output file. ###############################################
##########################################################################################

exit ${EXITCODE}
