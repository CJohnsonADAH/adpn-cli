#!/bin/bash
#
# adpn-do-tell: script to handle adpn tell commands
#
# @version 2021.1210

SCRIPTPATH="$(which "$0")"
SCRIPTPATH="$( readlink --canonicalize "${SCRIPTPATH}" )"
SCRIPTDIR="$(dirname "${SCRIPTPATH}")"
SCRIPT="$(basename "${SCRIPTPATH}")"

source "${SCRIPTDIR}/adpn-define-aliases"

__USAGE__="Usage: %s [--version] [--help] <SERVICE> to <CMD> [<ARGS>]"
__HELP__="[%s] Try '%s help' for more information." # "${SCRIPT_CMD_NAME}" "${SCRIPT_CMD_NAME}"
__DOC__="""${__USAGE__}

  --version 	Display the version of the script
  --help    	Display these usage notes

The most commonly used %s SERVICES are:
  gitlab       	Gitlab API
  slack        	Slack API
  
The most commonly used %s CMDs are:
  get          	GET values associated with a resource in <ARGS>
  post         	POST values to a resource in <ARGS>
  
Exit codes:
0 = success (successful operation and expected result)
1-254 = error in executing command
255 = command not supported
"""

##########################################################################################
### COMMAND LINE: loop through switches ##################################################
##########################################################################################

declare -a _CMDLINE ; _CMDLINE=("$0")

shopt -s lastpipe

declare -a SWITCHFILES ; SWITCHFILES=()
if [[ -r "${CONFFILE}" ]] ; then
	SWITCHFILES+=(${CONFFILE})
fi

CMDLINETXT=$(mktemp)

until [[ "$#" -lt 1 ]] ; do
	_CMDLINE+=("$1")
	printf "%s\n" "$1" >> "${CMDLINETXT}"
	shift
done

SWITCHFILES+=(${CMDLINETXT})

adpn_command_line "${SWITCHFILES[@]}"

rm "${CMDLINETXT}"

##########################################################################################
### SCRIPT: DETERMINE COMMAND, THEN EXECUTE PIPELINE  ####################################
##########################################################################################

EXITCODE=0
CMD="${_ARGV[1]}"

adpn_set_display_settings # V, VV, Q, QQ, DBG, DBGLEVEL, DDBG, SCRIPT_CMD_NAME / @see adpn-define-aliases
adpn_script_handle_version_or_help

declare -a _FORCE_CONTEXT=( "--context=${SCRIPT_CMD_NAME}" )

declare -a _ADD_CONTEXT=()
[[ -z "${_PARAM[context]}" ]] && _ADD_CONTEXT=( "${_FORCE_CONTEXT[@]}" )

declare -a CONTEXT_SW=( "${_ADD_CONTEXT[@]}" )
[[ -n "${DDBG}" ]] && CONTEXT_SW+=( "${DDBG}" )
[[ -n "${VV}" ]] && CONTEXT_SW+=( "${VV}" )
[[ -n "${QQ}" ]] && CONTEXT_SW+=( "${QQ}" )

if [[ ! -z "${_PARAM[remote]}" ]] ; then

	adpn_script_handle_remote_execution -t "tell" "${_CMDLINE[@]:1}"
	EXITCODE="$?"

else 

case "${CMD}" in
	
	"gitlab"|"slack")
		declare -a _GL_REQ=() _GL_PREPOSITION=()
		_GL_WORDS=""
		
		for ARG in "${_CMD_REST[@]}" ; do
			if [[ -z "${_GL_WORDS}" ]] ; then
				[[ "${ARG}" == "--" ]] && _GL_WORDS="${ARG}"
				_GL_REQ+=( "${ARG}" )
			else
				[[ -n "${_GL_PREPOSITION[*]}" ]] && _GL_REQ+=( "${ARG}" ) || _GL_PREPOSITION+=( "${ARG}" )
			fi
		done
		if [[ "${_GL_PREPOSITION[*]}" == "to" ]] ; then
			adpn_debug 20,adpn,tell,"${CMD}" "${LINENO}" "adpn-${CMD}-do %s" "$( printf '%q ' "${_GL_REQ[@]}" )"
			"adpn-${CMD}-do" "${_GL_REQ[@]}"
		else
			adpn_notice "${LINENO}" "$( printf "%s: preposition '%s' not understood." "${CMD}" "${_GL_PREPOSITION[*]}" )"
			EXITCODE=255
		fi
		;;
		
	"version"|"help")
		HELPCMD="${_ARGV[2]}"
		if [[ -z "${HELPCMD}" ]] ; then
			printf "${__DOC__}\n" "${SCRIPT_CMD_NAME}" "${SCRIPT_CMD_NAME}"
			EXITCODE=0
		else 
			adpn_help_notes "${ME}" "${HELPCMD}" "${CMD}"
			EXITCODE=$?
		fi
		;;
		
	*)
		printf "[%s] '%s' service not understood.\n" "${SCRIPT_CMD_NAME}" "${CMD}" 1>&2
		printf "${__HELP__}\n" "${SCRIPT_CMD_NAME}" "${SCRIPT_CMD_NAME}" 1>&2
		EXITCODE=255
		;;
esac

fi 

##########################################################################################
### CLEANUP: exit with settled exit code. ################################################
##########################################################################################

exit ${EXITCODE}
