#!/bin/bash
#
# adpn-define-aliases: some basic subroutines used across many of the adpn suite of scripts
#
# @version 2019.1016

PATH=${SCRIPTDIR}:${PATH}
CONFFILE="${SCRIPTDIR}/${SCRIPT}.defaults.conf"
JSONCONFFILE="${SCRIPTDIR}/adpnet.json"

# adpnprop: retrieve and echo a property from the adpnet.json config file
# example: FOOBAR=$( adpnprop "${KEY}" )
#
# @param string key name to retrieve from JSON config file
# @return int exit code from adpn-json.py (0=success, 1=key not found)
#
# @version 2019.0807
adpnprop() {
	local key="${1}"
	if [[ -z "${key}" ]] ; then
		REPLY=$(cat "${JSONCONFFILE}" | adpn-json.py)
		JSONEXIT=$?
	else
		REPLY=$(cat "${JSONCONFFILE}" | adpn-json.py --key="${key}")
		JSONEXIT=$?
	fi
	printf "%s" "${REPLY}" 
	return "${JSONEXIT}"
}

function pluginprop() {
	local txt="${1}" ; shift
	local key="${1}" ; shift
	local regex=""
	
	if [[ -z "${key}" ]] ; then
		regex=".*"
	else
		regex="^${key}\t"
	fi
	
	cat "${txt}" | grep -P "${regex}" | lockss-plugin-props-print-parameter.py "$@"
	return $?
}

declare -A _LINESWITCH=()

function adpn_command_line() {
	shopt -s lastpipe

	cat "$@" 2>/dev/null | while IFS="" read -r SWITCH ; do
		
		if [[ "${SWITCH}" =~ ^--([A-Za-z_0-9][^=]*)(=\s*(.*)\s*)?$ ]] ; then
			KEY="${BASH_REMATCH[1]}"
			VALUE="${BASH_REMATCH[3]}"
			if [[ -z "${BASH_REMATCH[2]}" ]] ; then
				VALUE="$KEY"
			fi
			_PARAM[$KEY]="${VALUE}"
			_LINESWITCH[$KEY]="${SWITCH}"

		elif [[ ! -z "${SWITCH}" ]] ; then
			_ARGV+=("${SWITCH}")
			
		fi
		
	done
	
}

function adpn_help_notes () {
	local scriptpath="${1}" ; shift
	local method="${1}" ; shift
	local context="${1}" ; shift

	local package=$(basename "${scriptpath}")
	local directive="[@]package ${package}"
	local HELPNOTES=""
	
	if [[ ! -z "${method}" ]] ; then
		directive="[@]method ${package} ${method}"
	fi
	
	HELPNOTES=$( sed --quiet "/^[#] ${directive}/,/^[#] @version/p" ${scriptpath} )
	
	if [ -z "${HELPNOTES}" ] ; then
		echo "[${package} ${context}] '${method}' help notes not yet implemented." 1>&2
		EXITCODE=255
	else 
		echo "${HELPNOTES}" | grep "^[#]" | grep -v "^[#] [@]" | sed "s/^[#] *//"
		EXITCODE=0
	fi
	
	return "${EXITCODE}"
}

function adpn_setting() {
	local switch="${1}"
	local prop="${2}"
	
	if [[ -z "${prop}" ]] ; then
		prop="${1}"
	fi
	
	if [[ ! -z "${_PARAM[$switch]}" ]] ; then
		printf "%s" "${_PARAM[$switch]}"
	else
		adpnprop "${prop}"
	fi
}

function echo_header() {
	local title="${1}"
	local underline="${2}"
	
	UPTITLE=$( echo "${title}" | tr "[:lower:]" "[:upper:]" )
	UNDERLINE=$( echo "${UPTITLE}" | sed "s/./${underline}/g" )
	
	echo ""
	echo "${UPTITLE}"
	echo "${UNDERLINE}"
}

# rawurlencode: Encode a command-line parameter to URL (%hex) style encoding and output
# example: FOOBAR=$( rawurlencode "${DATA}" )
# uses code from @Orwellophile at https://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command
# @version 2019.0807
rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o
  local level="${2}"
  
  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_a-zA-Z0-9] ) 	o="${c}" ;;
        [.~] )          	[[ "${level}" -ge 2 ]] && printf -v o '%%%02X' "'$c" || o="${c}" ;;
        * )             	printf -v o '%%%02X' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER) 
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

# urldecode: Decodes a command-line parameter from URL (%hex) style encoding to plain text
# one-liner solution provided by @guest and @netdesignate at https://stackoverflow.com/a/37840948
function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

# join_by: Joins a list of parameters using a delimiter string
# one-liner solution provided by @Nicholas Sushkin at https://stackoverflow.com/a/17841619
function join_by { local d=${1-} f=${2-}; if shift 2; then printf %s "$f" "${@/#/$d}"; fi; }