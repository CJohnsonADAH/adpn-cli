#!/bin/bash
#
# adpn-daemon-do: script to handle adpn daemon commands
#
# @version 2021.0918

SCRIPTPATH="$(which "$0")"
SCRIPTPATH="$( readlink --canonicalize "${SCRIPTPATH}" )"
SCRIPTDIR="$(dirname "${SCRIPTPATH}")"
SCRIPT="$(basename "${SCRIPTPATH}")"

source "${SCRIPTDIR}/adpn-define-aliases"
source "${SCRIPTDIR}/adpn-lockss-daemon-aliases"

__USAGE__="Usage: ${SCRIPT} [--version] [--help] <CMD> [<ARGS>]"
__HELP__="[${SCRIPT}] Try '${SCRIPT} help' for more information."
__DOC__="""${__USAGE__}

  --version 	Display the version of the script
  --help    	Display these usage notes

The most commonly used ${SCRIPT} commands are:
  verify       	Verify that an AU's parameters are complete and correct
               	and its start URL is accessible to the LOCKSS daemon.
  
Exit codes:
0 = success (successful operation and expected result)
1-254 = error in executing command
255 = command not supported
"""

##########################################################################################
### COMMAND LINE: loop through switches ##################################################
##########################################################################################

declare -a _CMDLINE ; _CMDLINE=("$0")

shopt -s lastpipe

declare -a SWITCHFILES ; SWITCHFILES=()
if [[ -r "${CONFFILE}" ]] ; then
	SWITCHFILES+=(${CONFFILE})
fi

CMDLINETXT=$(mktemp)

until [[ "$#" -lt 1 ]] ; do
	_CMDLINE+=("$1")
	printf "%s\n" "$1" >> "${CMDLINETXT}"
	shift
done

SWITCHFILES+=(${CMDLINETXT})

adpn_command_line "${SWITCHFILES[@]}"

rm "${CMDLINETXT}"

##########################################################################################
### SCRIPT: DETERMINE COMMAND, THEN EXECUTE PIPELINE  ####################################
##########################################################################################

EXITCODE=0
CMD="${_ARGV[1]}"

adpn_set_display_settings # V, VV, Q, QQ, DBG, DBGLEVEL, DDBG, SCRIPT_CMD_NAME / @see adpn-define-aliases
adpn_script_handle_version_or_help

if [[ ! -z "${_PARAM[remote]}" ]] ; then

	adpn_script_handle_remote_execution -t "daemon" "${_CMDLINE[@]:1}"
	EXITCODE="$?"

else 

case "${CMD}" in
	"verify")
		PIPELINE="$( adpn_parameter_from "--pipeline" "staged:verified" )"
		if [[ -n "${PIPELINE}" ]] ; then
			PIPEDFROM=$( printf "%s" "${PIPELINE}" | cut --field=1 --delimiter=":" )
			PIPEDTO=$( printf "%s" "${PIPELINE}" | cut --field=2 --delimiter=":" )
			adpn_debug 2 "${LINENO}" "SWITCH='%s', PIPELINE='%s': PIPEDFROM='%s', PIPEDTO='%s'\n" "${_SWITCHES[pipeline]}" "${PIPELINE}" "${PIPEDFROM}" "${PIPEDTO}" 1>&2
		fi
		
		declare -a TEMP_CLEANUP=()

		AIT_INPUT="$(mktemp)" ; TEMP_CLEANUP+=( "${AIT_INPUT}" )
		AIT_OUTPUT="$(mktemp)" ; TEMP_CLEANUP+=( "${AIT_OUTPUT}" )

		adpn_read_json_packet_source "${_ARGV[2]}" "${SCRIPT_CMD_NAME}" "${V}" | adpn_get_json_packets | adpn_select_json_packet "${PIPEDFROM}" "-" "head -n 1" "${PIPEDTO}" > "${AIT_INPUT}"
		EXITCODE="$?"
		
		if [[ -r "${AIT_INPUT}" ]] ; then
			PEER_TO=$( [[ -n "${_PARAM[to]}" ]] && printf "%s" "${_PARAM[to]}" || printf "%s" "${_PARAM[peer]}" )
			if [[ -z "${PEER_TO}" ]] ; then
				PEER_TO=$( adpnprop "peer" )
			fi
			if [[ -n "${PEER_TO}" ]] ; then
				PEER_TO=$( printf "%s--peer-to=%s" "" "${PEER_TO}" )
			fi

			declare -a AIT_SW=( "--remote=1" )
			[[ -n "${PIPELINE}" ]] && AIT_SW+=( "--pipeline=${PIPELINE}" )
			[[ -n "$( adpn_get_user_email )" ]] && AIT_SW+=( "--by=$( adpn_get_user_email )" )
			[[ -n "${V}" ]] && AIT_SW+=( "${V}" )
			[[ -n "${DDBG}" ]] && AIT_SW+=( "${DDBG}" )
			
			adpn_debug 01 "${LINENO}" '$ adpn-ingest-test "%s" "%s" "%s" > "%s"\n' "${AIT_INPUT}" "${PEER_TO}" "$( join_by '" "' "${AIT_SW[@]}" )" "${AIT_OUTPUT}"
			adpn-ingest-test "${AIT_INPUT}" "${PEER_TO}" "${AIT_SW[@]}" > "${AIT_OUTPUT}" ; EXITCODE="$?"

			cat "${AIT_OUTPUT}" ; echo
		fi
		
		for TMP in "${TEMP_CLEANUP[@]}" ; do
			rm "${TMP}"
		done

		if [[ "${EXITCODE}" -gt 0 ]] ; then
			printf "[%s:%d] adpn-ingest-test FAILED.\n" "${SCRIPT_CMD_NAME}" "${LINENO}" 1>&2
		fi
		;;
	
	"http")
		
		DAEMON_USER="$( adpn_parameter_from ".daemon/user" )"
		DAEMON_PASS="$( adpn_parameter_from ".daemon/pass" )"
		DAEMON_PASS="$( adpn_getpassword_from "${DAEMON_PASS}" )"
		CREDENTIALS="${DAEMON_USER}:${DAEMON_PASS}"
		FORMAT="$( adpn_parameter_from "--format" '\text' )"
		
		VERB="${_ARGV[2]}"
		[[ -z "${VERB}" ]] && VERB=GET
		
		URL="$( adpn_parameter_from "--url" "${_ARGV[3]}" )"
		if [[ "${URL}" =~ ^http(s)?:// ]] ; then
			REQ_URL="${URL}${URL_SEP}output=${FORMAT}"
		else
			LOCKSS_DAEMON_URL_BASE=$( lockss_daemon_url_base )
			REQ_URL="${LOCKSS_DAEMON_URL_BASE}/${URL##/}"
			[[ "${REQ_URL}" =~ [?] ]] && URL_SEP="&" || URL_SEP="?"
			REQ_URL="${REQ_URL}${URL_SEP}output=${FORMAT}"
		fi

		declare -a _CURLOPT=( "--request" "${VERB}" )
		for KEY in "${!_PARAM[@]}" ; do 
			case "${KEY}" in 
			"context"|"verbose"|"quiet"|"debug"|"dry-run")
				;;
			"verb"|"request"|"fail")
				;;
			"pipe")
				PIPED_TEXT="$( cat - )"
				PIPED_PAIR="$( printf "%s=%s" "${_PARAM[$KEY]}" "${PIPED_TEXT}" )"
				_CURLOPT+=( '--data-urlencode' "${PIPED_PAIR}")
				;;
			*)
				[[ "${KEY}" =~ ^data-(.*) ]] && FIELD="${BASH_REMATCH[1]}" || FIELD="${KEY}"
				_CURLOPT+=( "--data-urlencode" "${FIELD}=${_PARAM[$KEY]}" )
				;;
			esac
		done

		curl --fail --silent "${REQ_URL}" --user "${CREDENTIALS}" "${_CURLOPT[@]}"
		EXITCODE="$?"
		;;
		
	"refresh")
		HTML_OUT="$( "${ME}" http POST "/DebugPanel" --data-action="Reload Config" --data-url="" --data-msg="" --data-auid="" )"
		EXITCODE="$?"
		
		if [[ "${EXITCODE}" -eq 0 ]] ; then
			adpn_notice "${LINENO}" "%s" "LOCKSS Daemon Configuration reloaded."
		fi
		;;
		
	"version"|"help")
		EXITCODE=0
		;;
		
	*)
		echo "[${SCRIPT_CMD_NAME}] '${CMD}' command not understood." 1>&2
		echo "${__HELP__}" 1>&2
		EXITCODE=255
		;;
esac

fi 

##########################################################################################
### CLEANUP: exit with settled exit code. ################################################
##########################################################################################

exit ${EXITCODE}
