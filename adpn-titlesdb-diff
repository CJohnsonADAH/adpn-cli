#!/bin/bash
#
# adpn-titlesdb-diff: Take a before/after diff of titlesdb XML listing for given peer node
# from the ADPNet configuration server, to confirm that an AU has been correctly added to
# the ingest list, or correctly published to the network.
#
# If taking a "before" snapshot, returns 0 provided the HTTP GET comes off successfully
# and provides identical results one after the other.
#
# If taking an "after" snapshot, returns 0 provided the HTTP GET comes off successfully
# and *differs* from the "before" snapshot.
#
# Default values for commonly-reused configuration switches can be specified in plaintext
# file named `adpn-titlesdb-diff.defaults.conf`, with one switch per line, in the same
# directory as the script.
#
# @version 2019.0624

__DOC__="""
Usage: adpn-titlesdb-diff [<OPTION>]... [<PEER>|ALL]

  --help              	Display these usage notes
  --verbose=<LEVEL>
  --props-server=<URL> 	URL for ADPNet config/props server
                      	  e.g. http://configuration.adpn.org/titlelist/
  --xmldir=<DIR>      	file system path for before/after snapshots
                      	  default: user home dir (${HOME})
  --wget=<CMD>        	command for HTTP GET request; should print to stdout
                      	  e.g. 'curl', 'wget -O -', 'curl --silent', etc.
  --before            	save a 'Before' snapshot
  --after            	save an 'After' snapshot and diff against 'Before'
  <PEER>|ALL           	code for node to check (e.g.: ADAH, AUB, UAT, etc.)
                      	  or ALL for titles published to all nodes on the network

Exit codes:
0 = success (successful retrieval and expected result)
1 = diff failure (no difference detected between 'Before' and 'After' snapshots)
2-255 = HTTP request failure (usually a curl or wget error code)
"""

SCRIPTPATH=$(which $0)
SCRIPTDIR=$(dirname "${SCRIPTPATH}")
SCRIPTNAME=$(basename "${SCRIPTPATH}")

source "${SCRIPTDIR}/adpn-define-aliases"

##########################################################################################
### COMMAND LINE: loop through switches ##################################################
##########################################################################################

declare -a _ARGV ; _ARGV=("$0")
declare -A _PARAM ; _PARAM=([props-server]="" [xmldir]="" [wget]="" )

shopt -s lastpipe

declare -a SWITCHFILES ; SWITCHFILES=()
if [[ -r "${CONFFILE}" ]] ; then
	SWITCHFILES+=(${CONFFILE})
fi

CMDLINETXT=`mktemp`

until [[ "$#" -lt 1 ]] ; do
	printf "%s\n" "$1" >> "${CMDLINETXT}"
	shift
done

SWITCHFILES+=(${CMDLINETXT})

adpn_command_line "${SWITCHFILES[@]}"

##########################################################################################
### SCRIPT: Download XML from props server, then diff against old. #######################
##########################################################################################

PROPS=$(adpn_setting props-server)
XMLDIR=$(adpn_setting xmldir)
WGET=$(adpn_setting wget)

[[ -z "${_PARAM[verbose]}" ]] && V=0 || V="${_PARAM[verbose]}"
[[ "${V}" =~ ^[0-9]+$ ]] && V="${V}" || V=1

[[ ! -z "${XMLDIR}" ]] || XMLDIR=~
if [[ -z "${WGET}" ]] ; then
	WGET=$(which curl) && [[ ! -z "${WGET}" ]] && WGET="${WGET} --fail --silent"
	[[ $V -ge 1 ]] && HEADS=$(mktemp) || HEADS=""
	[[ -n "${HEADS}" ]] && WGET="${WGET} --dump-header ${HEADS}"
fi
if [[ -z "${WGET}" ]] ; then
	WGET=$(which wget) && [[ ! -z "${WGET}" ]] && WGET="${WGET} --quiet --output-document=-"
fi
# curl, wget, or similar; should print to stdout

if [[ ! -z "${_PARAM[help]}" ]] ; then
	echo "${__DOC__}"
	echo ""
	echo "props-server: ${PROPS}"
	echo "xmldir: ${XMLDIR}"
	echo "curl/wget: ${WGET}"
	[[ -n "${HEADS}" ]] && rm "${HEADS}"
	exit 0
fi

if [[ -z "${_ARGV[1]}" ]] ; then
	PEER=ALL
else
	PEER="${_ARGV[1]}"
fi

OLDXML="${XMLDIR}/titlesdb.${PEER}.0.xml"
NEWXML="${XMLDIR}/titlesdb.${PEER}.1.xml"

EXITCODE=0
if [[ ! -z "${_PARAM[before]}" || ! -r "${OLDXML}" ]] ; then
    [[ $V -ge 1 ]] && echo "${WGET} '${PROPS}index?peer=${PEER}&stype=1&ext=.xml' > '${OLDXML}' || EXITCODE=\$?" >&2
	${WGET} "${PROPS}index?peer=${PEER}&stype=1&ext=.xml" > "${OLDXML}" || EXITCODE=$?
	[[ -n "${HEADS}" ]] && cat "${HEADS}" >& 2
	[[ -n "${HEADS}" ]] && rm "${HEADS}"
fi

[[ $V -ge 1 ]] && echo "${WGET} '${PROPS}index?peer=${PEER}&stype=1&ext=.xml' > '${NEWXML}' || EXITCODE=\$?" >&2
${WGET} "${PROPS}index?peer=${PEER}&stype=1&ext=.xml" > "${NEWXML}" || EXITCODE=$?
[[ -n "${HEADS}" ]] && cat "${HEADS}" >& 2
[[ -n "${HEADS}" ]] && rm "${HEADS}"

if [[ "${EXITCODE}" -gt 0 ]] ; then
	echo "[${SCRIPTNAME}] HTTP GET (${WGET}) failed, exit code: ${EXITCODE}" 1>&2
	exit "${EXITCODE}"
fi

[[ $V -ge 1 ]] && echo "diff -u '${OLDXML}' '${NEWXML}' ; EXITCODE=\$?" >&2
diff -u "${OLDXML}" "${NEWXML}" ; EXITCODE=$?
if [[ -z "${_PARAM[before]}" ]] ; then
	if [[ "${EXITCODE}" -eq 0 ]] ; then
		echo "[${SCRIPTNAME}] No difference found on ${PEER} @" `date`
		EXITCODE=1
	elif [[ "${EXITCODE}" -eq 1 ]] ; then
		EXITCODE=0
	fi
fi

##########################################################################################
### CLEANUP: remove temporary output file. ###############################################
##########################################################################################

rm "${CMDLINETXT}"

exit ${EXITCODE}
